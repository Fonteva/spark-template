name: Terraform Deploy

on:
  workflow_call:
    inputs:
      TF_VAR_FILE:
        description: Terraform variable file
        type: string
      DEPLOY_DIR:
        description: Directory with the main.tf file to deploy
        type: string
      TF_INIT_ARGS:
        description: Arguments for the 'terraform init' command.
        type: string
        default: ""
      RUN_TF_FMT:
        description: If true, run 'terraform fmt'
        type: boolean
        default: true
      RUN_TF_PLAN:
        description: If true, run 'terraform plan'
        type: boolean
        default: true
      TF_PLAN_PRE_CMD:
        description: An optional command to run before running 'terraform plan'
        type: string
        default: ""
      UPDATE_PR:
        description: If true, update the current PR with details from the 'terraform plan' command.
        type: boolean
        default: false
      RUN_TF_APPLY:
        description: If true, run 'terraform apply'
        type: boolean
        default: false
      TF_APPLY_PRE_CMD:
        description: An optional command to run before running 'terraform apply'
        type: string
        default: ""
      RUN_TF_SHOW:
        description: If true, run 'terraform show'
        type: boolean
        default: false
      TF_LOG:
        description: Terraform log level
        type: string
        default: WARN
      TF_LOG_PROVIDER:
        description: Terraform provider log level
        type: string
        default: WARN
    secrets:
      AWS_ACCESS_KEY_ID:
        description: The access key to use when authenticating to AWS
      AWS_SECRET_ACCESS_KEY:
        description: The secret access key to use when authenticating to AWS
      GH_SSH_PRIVATE_KEY:
        description: A private key to use when authenticating to GitHub.  Required if the Terraform file uses modules from a private GitHub repo.
      GH_TOKEN:
        description: GitHub token to use for authentication in pre-plan and pre-apply scripts.
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_SSH_PRIVATE_KEY: ${{ secrets.GH_SSH_PRIVATE_KEY }}
      TF_VAR_FILE: ${{ inputs.TF_VAR_FILE }}
      DEPLOY_DIR: ${{ inputs.DEPLOY_DIR }}
      TF_LOG: ${{ inputs.TF_LOG }}
      TF_LOG_PROVIDER: ${{ inputs.TF_LOG_PROVIDER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.7

      - name: Check Terraform Format
        id: fmt
        if: ${{ inputs.RUN_TF_FMT }}
        run: terraform fmt -check
        working-directory: ${{ inputs.DEPLOY_DIR }}

      - name: Terraform Init
        id: init
        run: |
          if [ ! -z "$GH_SSH_PRIVATE_KEY" ]; then
            eval $(ssh-agent -s)
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            export GH_SSH_PRIVATE_KEY_FILE="$HOME/.ssh/id_rsa_fonteva-codebuild"
            echo "$GH_SSH_PRIVATE_KEY" > "$GH_SSH_PRIVATE_KEY_FILE"
            chmod 400 "$GH_SSH_PRIVATE_KEY_FILE"
            ssh-add "$GH_SSH_PRIVATE_KEY_FILE"
            chmod 400 "$GH_SSH_PRIVATE_KEY_FILE"
          fi
          
          terraform init ${{ inputs.TF_INIT_ARGS }}
        working-directory: ${{ inputs.DEPLOY_DIR }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ inputs.DEPLOY_DIR }}

      - name: Terraform Plan (pre)
        if: ${{ inputs.RUN_TF_PLAN && inputs.TF_PLAN_PRE_CMD }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: ${{ inputs.TF_PLAN_PRE_CMD }}
        working-directory: ${{ inputs.DEPLOY_DIR }}

      - name: Terraform Plan
        id: plan
        if: ${{ inputs.RUN_TF_PLAN }}
        run: terraform plan -no-color -input=false -var-file=$TF_VAR_FILE
        working-directory: ${{ inputs.DEPLOY_DIR }}
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: ${{ inputs.RUN_TF_PLAN && inputs.UPDATE_PR }}
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: ${{ inputs.RUN_TF_PLAN && steps.plan.outcome == 'failure' }}
        run: exit 1

      - name: Terraform Apply (pre)
        if: ${{ inputs.RUN_TF_APPLY && inputs.TF_APPLY_PRE_CMD }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: ${{ inputs.TF_APPLY_PRE_CMD }}
        working-directory: ${{ inputs.DEPLOY_DIR }}
          
      - name: Terraform Apply
        if: ${{ inputs.RUN_TF_APPLY }}
        run: terraform apply -auto-approve -input=false -var-file=$TF_VAR_FILE
        working-directory: ${{ inputs.DEPLOY_DIR }}
          
      - name: Terraform Show
        if: ${{ inputs.RUN_TF_SHOW }}
        run: terraform show -input=false -var-file=$TF_VAR_FILE
        working-directory: ${{ inputs.DEPLOY_DIR }}
