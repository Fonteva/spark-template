name: Create Package Version

env:
  SFDX_USE_GENERIC_UNIX_KEYCHAIN: "true"
  PROD_INST_URL: "https://login.salesforce.com"
  SFDX_KEY_FILE_NAME: framework.key

on:
  workflow_call:
    inputs:
      PACKAGE_NAME:
        description: The alias or ID of the package.
        type: string
      VERSION_NAME:
        description: The version name to assign to the new package version.  If not set, the version name from the sfdx-project.json file is used.
        type: string
        default: ""
      BRANCH_NAME:
        description: Name of the branch in your source control system that the package version is based on.
        type: string
        default: ""
      CODE_COVERAGE:
        description: If true, run unit tests and calculate code coverage.
        type: boolean
        default: true
      PACKAGE_SRC_DIR:
        description: The directory path where the package source files are located (relative to the repository directory).  If not set, the source directory from the sfdx-project.json file is used.
        type: string
      VERSION_DESCRIPTION:
        description: The description of the package version.  If not set, the version description from the sfdx-project.json file is used.
        type: string
        default: ""
      DEFINITION_FILE:
        description: The path to the scratch org definition file for the package version (relative to the repository directory).
        type: string
        default: ""
      INSTALLATION_KEY:
        description: The installation key for installing the package version.  If not set, installing the package version will not require an installation key.
        type: string
        default: ""
      VERSION_NUMBER:
        description: The version number for the new package version.  If not set, the version number from the sfdx-project.json file is used.
        type: string
        default: ""
      VERSION_TAG:
        description: The version tag for the new package version.  If not set, the short form of the hash of the last commit is used.
        type: string
        default: ""
      WAIT_TIMEOUT:
        description: The number of minutes to wait for the package version to create before timing out.
        type: int
        default: 60
      API_VERSION:
        description: The API version to use when creating the new package version.  If not set, the API version of the sfdx-package.json file is used.
        type: string
        default: ""
      LANGUAGE:
        description: The language of the new package version.  If not set, the default language is used.
        type: string
        default: ""
      POST_INSTALL_SCRIPT:
        description: Name of the post-install script; applies to managed packages only.
        type: string
        default: ""
      POST_INSTALL_URL:
        description: Post-install instructions URL.
        type: string
        default: ""
      RELEASE_NOTES_URL:
        description: Release notes URL.
        type: string
        default: ""
      SKIP_ANCESTOR_CHECK:
        description:  Overrides ancestry requirements, which allows you to specify a package ancestor that isn’t the highest released package version.
        type: boolean
        default: false
      SKIP_VALIDATION:
        description: Skip validation during package version creation; you can’t promote unvalidated package versions.
        type: boolean
        default: false
      UNINSTALL_SCRIPT:
        description: Uninstall script name; applies to managed packages only.
        type: string
        default: ""
      PROMOTE_PACKAGE_VERSION:
        description: If true, promote the package version after creating it.
        type: boolean
        default: false
      REPO:
        description: The name of the Git repo.  Required if POST_PACKAGE_DETAILS is true.
        type: string
      CCI_FLOW_NAME:
        description: The name of a CumulusCI flow to create the new package version.
        type: string
      NO_FONDASH:
        description: If true, do not post the new package version details to Fondash.
        type: boolean
        default: false
      UPDATE_BUILD_SUBMODULE:
        description: If true, update the repo's build submodule after checking out.
        type: boolean
        default: true
      POST_PACKAGE_DETAILS:
        description: If true, post details of the new package version.
        type: boolean
        default: true
    secrets:
      BUILD_SSH_RSA_KEY:
        description: The RSA private key to use to check out source files.
        required: true
      CUMULUSCI_SERVICE_github:
        description: The CumulusCI GitHub service account.  Required if CCI_FLOW_NAME is set.
        required: false
      DEVHUB_CLIENTID:
        required: true
      DEVHUB_KEY:
        required: true
      DEVHUB_USERNAME:
        required: true

jobs:
  build:
    runs-on: [self-hosted, prod]
    env:
      PACKAGE_NAME: ${{ inputs.PACKAGE_NAME }}
      VERSION_NAME: ${{ inputs.VERSION_NAME }}
      BRANCH_NAME: ${{ inputs.BRANCH_NAME }}
      CODE_COVERAGE: ${{ inputs.CODE_COVERAGE }}
      PACKAGE_SRC_DIR: ${{ inputs.PACKAGE_SRC_DIR }}
      VERSION_DESCRIPTION: ${{ inputs.VERSION_DESCRIPTION }}
      DEFINITION_FILE: ${{ inputs.DEFINITION_FILE }}
      INSTALLATION_KEY: ${{ inputs.INSTALLATION_KEY }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
      VERSION_TAG: ${{ inputs.VERSION_TAG }}
      WAIT_TIMEOUT: ${{ inputs.WAIT_TIMEOUT }}
      API_VERSION: ${{ inputs.API_VERSION }}
      LANGUAGE: ${{ inputs.LANGUAGE }}
      POST_INSTALL_SCRIPT: ${{ inputs.POST_INSTALL_SCRIPT }}
      POST_INSTALL_URL: ${{ inputs.POST_INSTALL_URL }}
      RELEASE_NOTES_URL: ${{ inputs.RELEASE_NOTES_URL }}
      SKIP_ANCESTOR_CHECK: ${{ inputs.SKIP_ANCESTOR_CHECK }}
      SKIP_VALIDATION: ${{ inputs.SKIP_VALIDATION }}
      UNINSTALL_SCRIPT: ${{ inputs.UNINSTALL_SCRIPT }}
      DEVHUB_USERNAME: ${{ secrets.DEVHUB_USERNAME }}
      DEVHUB_CLIENTID: ${{ secrets.DEVHUB_CLIENTID }}
      DEVHUB_KEY: ${{ secrets.DEVHUB_KEY }}
      CUMULUSCI_SERVICE_github: ${{ secrets.CUMULUSCI_SERVICE_GITHUB }}
      CCI_FLOW_NAME: ${{ inputs.CCI_FLOW_NAME }}
      REPO: ${{ inputs.REPO }}
      NO_FONDASH: ${{ inputs.NO_FONDASH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.BUILD_SSH_RSA_KEY }}
          submodules: true

      - name: Update Build Submodule
        if: ${{ inputs.UPDATE_BUILD_SUBMODULE }}
        run: |
          cd build
          git checkout master
          git pull

      - name: Checkout ops-scripts
        if: ${{ inputs.UPLOAD_PACKAGE }}
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.BUILD_SSH_RSA_KEY }}
          repository: Fonteva/ops-scripts
          path: ops-scripts

      - name: Authorize Devhub
        run: |
          echo "$DEVHUB_KEY" | base64 -d > ~/$DEVHUB_KEY_FILE
          echo "** Running 'sfdx auth:jwt:grant' ..."
          sfdx auth:jwt:grant --clientid $DEVHUB_CLIENTID --username $DEVHUB_USERNAME --jwtkeyfile ~/$DEVHUB_KEY_FILE --setdefaultdevhubusername --instanceurl $PROD_INST_URL
          
          echo "** Running 'sfdx force:config:set' ..."
          sfdx force:config:set defaultdevhubusername=$DEVHUB_USERNAME
          
      #- name: Create Package Version
      #  if: ${{ inputs.CCI_FLOW_NAME }}
      #  run: |
      #    if [ -z "$CUMULUSCI_SERVICE_github" ];then
      #      echo "CUMULUSCI_SERVICE_github input param is required if CCI_FLOW_NAME is set"
      #      exit -1
      #    fi
      #
      #    cciOrgVar="CUMULUSCI_ORG_$ORG_ALIAS"
      #    echo $cciOrgVar
      #    printf -v $cciOrgVar '{"username": "'$ORG_USERNAME'", "instance_url": "'$PROD_INST_URL'"}'
      #    export $cciOrgVar
      #    echo ${!cciOrgVar}
      #    echo "** Running 'cci flow run $CCI_FLOW_NAME' ..."
      #    cci flow run $CCI_FLOW_NAME --org $ORG_ALIAS
          
      - name: Create Package Version
        run: |
          if [ -z "$VERSION_TAG" ]; then
            TAG=$(git log -n 1 --pretty='%C(auto)%h')
          else
            TAG="$VERSION_TAG"
          fi

          createArgs="-p \"$PACKAGE_NAME\" -t \"$TAG\" -w $WAIT_TIMEOUT"
          
          if [ ! -z "$VERSION_NAME" ];then
            createArgs="$createArgs -a \"$VERSION_NAME\""
          fi
          
          if [ ! -z "$BRANCH_NAME" ];then
            createArgs="$createArgs -b \"$BRANCH_NAME\""
          fi
          
          if [ "$CODE_COVERAGE" == "true" ];then
            createArgs="$createArgs -c"
          fi
          
          if [ ! -z "$PACKAGE_SRC_DIR" ];then
            createArgs="$createArgs -d \"$PACKAGE_SRC_DIR\""
          fi
          
          if [ ! -z "$VERSION_DESCRIPTION" ];then
            createArgs="$createArgs -e \"$VERSION_DESCRIPTION\""
          fi
          
          if [ ! -z "$DEFINITION_FILE" ];then
            createArgs="$createArgs -f \"$DEFINITION_FILE\""
          fi
          
          if [ -z "$INSTALLATION_KEY" ];then
            createArgs="$createArgs -x"
          else
            createArgs="$createArgs -k \"$INSTALLATION_KEY\""
          fi
          
          if [ ! -z "$VERSION_NUMBER" ];then
            createArgs="$createArgs -n \"$VERSION_NUMBER\""
          fi
          
          if [ ! -z "$API_VERSION" ];then
            createArgs="$createArgs --api-version=$API_VERSION"
          fi
          
          if [ ! -z "$LANGUAGE" ];then
            createArgs="$createArgs --language=$LANGUAGE"
          fi
          
          if [ ! -z "$POST_INSTALL_SCRIPT" ];then
            createArgs="$createArgs --post-install-script=\"$POST_INSTALL_SCRIPT\""
          fi
          
          if [ ! -z "$POST_INSTALL_URL" ];then
            createArgs="$createArgs --post-install-url=$POST_INSTALL_URL"
          fi
          
          if [ ! -z "$RELEASE_NOTES_URL" ];then
            createArgs="$createArgs --releasenotes-url=$RELEASE_NOTES_URL"
          fi
          
          if [ "$SKIP_ANCESTOR_CHECK" == "true" ];then
            createArgs="$createArgs --skip-ancestor-check"
          fi
          
          if [ "$SKIP_VALIDATION" == "true" ];then
            createArgs="$createArgs --skip-validation"
          fi
          
          if [ ! -z "$UNINSTALL_SCRIPT" ];then
            createArgs="$createArgs --uninstall-script=$UNINSTALL_SCRIPT"
          fi
          
          createArgs="$createArgs -t \"$TAG\""
          
          echo "** Running 'sfdx force:package:version:create' ..."
          result=$(sfdx force:package:version:create $createArgs)
          
          echo $result
          
          # TODO: Get package version ID
          # TODO: Check in sfdx-project.json file if it was modified.
          
      - name: Promote Package Version
        if: ${{ inputs.PROMOTE_PACKAGE_VERSION }}
        run: |
          echo "** Running 'sfdx force:package:version:promote' ..."
          # TODO: Get package version ID
          # TODO: Run sfdx force:package:version:promote -n -p $VERSION_ID
          
      - name: Post Package Details
        if: ${{ inputs.POST_PACKAGE_DETAILS }}
        run: |
          if [ -z "$REPO" ];then
            echo "REPO input param is required if POST_PACKAGE_DETAILS is true"
            exit -1
          fi

          GIT_COMMIT=$(git rev-parse HEAD)
          echo "** Commit = $GIT_COMMIT"
          
          echo "** Getting Jira tickets ..."
          git log --first-parent --oneline --since="24 hours ago" > test.txt
          sed -i -e 's/[[:blank:]]/-/g' test.txt
          jiraticket=`grep -P -o "(?i)PD-[0-9]{1,}" test.txt | tr '\n' ',' | tr [a-z] [A-Z]`
          if [ -z "$jiraticket" ];then
            echo "** No Jira ticket found"
            jiraticket="NoTickets"
          else
            echo "jiraticket = $jiraticket"
          fi;
          
          echo "** Running 'npm install' ..."
          pushd ./ops-scripts/uploads-scripts/github
          npm install
          
          uploadArgs=""
          
          if [ "$NO_FONDASH" == "true" ]; then
            uploadArgs="--nofondash"
          else
            uploadArgs=""
          fi
          
          echo "uploadArgs = $uploadArgs"
          
          echo "** Running 'node upload.js' ..."
          node ./upload.js --package-type=2GP --package-name="$PACKAGE_NAME" --versionname=$VERSION_NAME --tickets=$jiraticket --repo=$REPO --commit=$GIT_COMMIT $uploadArgs
          popd

  clean:
    if: ${{ always() }}
    needs: [ build ]
    runs-on: [self-hosted, prod]
    steps:
      - name: Remove key file
        run: |
          rm -f ~/$SFDX_KEY_FILE_NAME

      - name: Remove workspace folder
        run: |
          rm -rf * $GITHUB_WORKSPACE
