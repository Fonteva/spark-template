name: Upload Package

env:
  SFDX_USE_GENERIC_UNIX_KEYCHAIN: "true"
  PROD_INST_URL: "https://login.salesforce.com"

on:
  workflow_call:
    inputs:
      SECRET_ID:
        type: string
      USERNAME_SECRET:
        type: string
      PASSWORD_SECRET:
        type: string
      REPO:
        required: true
        type: string
      CCI_FLOW_NAME:
        required: true
        type: string
      ORG_USERNAME:
        required: true
        type: string
      ORG_NAMESPACE:
        required: true
        type: string
      ORG_ALIAS:
        required: true
        type: string
      VERSION_NAME:
        required: true
        type: string
      IS_PATCH:
        required: false
        type: boolean
        default: false
      VERSION_NUM_MAJOR:
        type: string
      VERSION_NUM_MINOR:
        type: string
      NO_FONDASH:
        required: false
        type: boolean
        default: false
      NO_BUILD_SUBMODULE:
        required: false
        type: boolean
        default: false
    secrets:
      BUILD_SSH_RSA_KEY:
        required: true
      DEVHUB_CLIENTID:
        required: true
      DEVHUB_KEY:
        required: true
      DEVHUB_USERNAME:
        required: true
      CUMULUSCI_SERVICE_github:
        required: true
      SFDX_CLIENT_ID:
        required: true
      SFDX_HUB_KEY:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      ORG_PASSWORD:
        required: false

jobs:
  build:
    runs-on: [self-hosted, prod]
    env:
      DEVHUB_USERNAME: ${{ secrets.DEVHUB_USERNAME }}
      DEVHUB_CLIENTID: ${{ secrets.DEVHUB_CLIENTID }}
      DEVHUB_KEY: ${{ secrets.DEVHUB_KEY }}
      CUMULUSCI_SERVICE_github: ${{ secrets.CUMULUSCI_SERVICE_GITHUB }}
      SFDX_CLIENT_ID: ${{ secrets.SFDX_CLIENT_ID }}
      SFDX_HUB_KEY: ${{ secrets.SFDX_HUB_KEY }}
      MARKETPLACE_TOKEN: ${{ secrets.MARKETPLACE_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CCI_FLOW_NAME: ${{ inputs.CCI_FLOW_NAME }}
      SECRET_ID: ${{ inputs.SECRET_ID }}
      USERNAME_SECRET: ${{ inputs.USERNAME_SECRET }}
      PASSWORD_SECRET: ${{ inputs.PASSWORD_SECRET }}
      REPO: ${{ inputs.REPO }}
      ORG_USERNAME: ${{ inputs.ORG_USERNAME }}
      ORG_NAMESPACE: ${{ inputs.ORG_NAMESPACE }}
      ORG_PASSWORD: ${{ secrets.ORG_PASSWORD }}
      ORG_ALIAS: ${{ inputs.ORG_ALIAS }}
      VERSION_NAME: ${{ inputs.VERSION_NAME }}
      IS_PATCH: ${{ inputs.IS_PATCH }}
      VERSION_NUM_MAJOR: ${{ inputs.VERSION_NUM_MAJOR }}
      VERSION_NUM_MINOR: ${{ inputs.VERSION_NUM_MINOR }}
      FRAMEWORK_KEY_FILE: framework.key
      NO_FONDASH: ${{ inputs.NO_FONDASH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.BUILD_SSH_RSA_KEY }}
          submodules: true

      - name: Update Build Submodule
        if: ${{ !inputs.NO_BUILD_SUBMODULE }}
        run: |
          cd build
          git checkout master
          git pull

      - name: Checkout ops-scripts
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.BUILD_SSH_RSA_KEY }}
          repository: Fonteva/ops-scripts
          path: ops-scripts

      - name: Upload
        run: |
          if [ ! -e ~/$FRAMEWORK_KEY_FILE ]; then
            echo "$SFDX_HUB_KEY" > ~/$FRAMEWORK_KEY_FILE
            echo "** Running 'sfdx auth:jwt:grant' ..."
            echo $SFDX_CLIENT_ID
            echo $ORG_USERNAME
            cat $FRAMEWORK_KEY_FILE
            sfdx auth:jwt:grant --clientid $SFDX_CLIENT_ID --username $ORG_USERNAME --jwtkeyfile ~/$FRAMEWORK_KEY_FILE --instanceurl $PROD_INST_URL
          fi
                    
          GIT_COMMIT=$(git rev-parse HEAD)
          echo "** Commit = $GIT_COMMIT"
          
          # getting the jira tickets
          git log --first-parent --oneline --since="24 hours ago" > test.txt
          sed -i -e 's/[[:blank:]]/-/g' test.txt
          jiraticket=`grep -P -o "(?i)PD-[0-9]{1,}" test.txt | tr '\n' ',' | tr [a-z] [A-Z]`
          if [ -z "$jiraticket" ];then
            echo "** No Jira ticket found"
            jiraticket="NoTickets"
          else
            echo "jiraticket = $jiraticket"
          fi;
          
          cciOrgVar="CUMULUSCI_ORG_$ORG_ALIAS"
          echo $cciOrgVar
          printf -v $cciOrgVar '{"username": "'$ORG_USERNAME'", "instance_url": "'$PROD_INST_URL'"}'
          export $cciOrgVar
          echo ${!cciOrgVar}
          echo "** Running 'cci flow run $CCI_FLOW_NAME' ..."
          cci flow run $CCI_FLOW_NAME --org $ORG_ALIAS
          
          echo "** Running 'npm install' ..."
          pushd ./ops-scripts/uploads-scripts/github
          npm install
          
          uploadArgs=""
          
          if [ "$NO_FONDASH" == "true" ]; then
            uploadArgs="--nofondash"
          else
            uploadArgs=""
          fi
          
          if [ "$IS_PATCH" == "true" ]; then
            uploadArgs="$uploadArgs --ispatch --major=$VERSION_NUM_MAJOR --minor=$VERSION_NUM_MINOR"
          fi
          
          if [ "$SECRET_ID" ]; then
            uploadArgs="$uploadArgs --secretid=$SECRET_ID"
            
            if [ "$USERNAME_SECRET" ]; then
              uploadArgs="$uploadArgs --usernamesecret=$USERNAME_SECRET"
            fi
          
            if [ "$PASSWORD_SECRET" ]; then
              uploadArgs="$uploadArgs --passwordsecret=$PASSWORD_SECRET"
            fi
          elif [ "$ORG_PASSWORD" ]; then
            uploadArgs="$uploadArgs --username=$ORG_USERNAME --password=$ORG_PASSWORD"
          else
            echo "** Running 'sfdx auth:jwt:grant' ..."
            # Running 'sfdx auth:jwt:grant' again to get a new access token:
            echo $SFDX_CLIENT_ID
            echo $ORG_USERNAME
            cat $FRAMEWORK_KEY_FILE
            orgInfo1=$(sfdx force:org:display -u $ORG_USERNAME --json)
            echo orgInfo1
            sfdx auth:jwt:grant --clientid $SFDX_CLIENT_ID --username $ORG_USERNAME --jwtkeyfile ~/$FRAMEWORK_KEY_FILE --instanceurl $PROD_INST_URL
            orgInfo=$(sfdx force:org:display -u $ORG_USERNAME --json)
            accessToken=$(echo $orgInfo | jq -r .result.accessToken)
            instanceUrl=$(echo $orgInfo | jq -r .result.instanceUrl)
            uploadArgs="$uploadArgs --accesstoken=$accessToken --instanceurl=$instanceUrl"
          fi
          
          echo "uploadArgs = $uploadArgs"
          
          echo "** Running 'node upload.js' ..."
          node ./upload.js --namespace=$ORG_NAMESPACE --versionname=$VERSION_NAME --tickets=$jiraticket --repo=$REPO --commit=$GIT_COMMIT $uploadArgs
          popd

  clean:
    if: ${{ always() }}
    needs: [ build ]
    runs-on: [self-hosted, prod]
    steps:
      - name: Remove workspace folder
        run: |
          rm -rf * $GITHUB_WORKSPACE
