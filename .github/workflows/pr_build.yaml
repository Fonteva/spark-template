name: PR Build

env:
  SFDX_USE_GENERIC_UNIX_KEYCHAIN: "true"
  PROD_INST_URL: "https://login.salesforce.com"
  TEST_INST_URL: "https://test.salesforce.com"

on:
  workflow_call:
    inputs:
      SCRATCH_ORG_JSON:
        required: true
        type: string
      CCI_FLOW_NAME:
        required: true
        type: string
      SCRATCH_ORG_USERNAME:
        required: true
        type: string
      SCRATCH_ORG_ALIAS:
        required: true
        type: string
      RUN_NPM_INSTALL:
        required: false
        type: boolean
        default: false
    secrets:
      BUILD_SSH_RSA_KEY:
        required: true
      DEVHUB_CLIENTID:
        required: true
      DEVHUB_KEY:
        required: true
      DEVHUB_USERNAME:
        required: true
      CUMULUSCI_SERVICE_github:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DEVHUB_USERNAME: ${{ secrets.DEVHUB_USERNAME }}
      DEVHUB_CLIENTID: ${{ secrets.DEVHUB_CLIENTID }}
      DEVHUB_KEY: ${{ secrets.DEVHUB_KEY }}
      SCRATCH_ORG_JSON: ${{ inputs.SCRATCH_ORG_JSON }}
      CCI_FLOW_NAME: ${{ inputs.CCI_FLOW_NAME }}
      SCRATCH_ORG_USERNAME: ${{ inputs.SCRATCH_ORG_USERNAME }}
      SCRATCH_ORG_ALIAS: ${{ inputs.SCRATCH_ORG_ALIAS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.BUILD_SSH_RSA_KEY }}
          submodules: true

      - name: Update Build Submodule
        run: |
          cd build
          git checkout master
          git pull

      - name: Install Salesforce CLI
        run: |
          wget -qO- https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz | tar xJf -
          ./sfdx-cli-*/install

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"

      - name: Install CumulusCI
        run: |
          python -m pip install -U pip
          pip install cumulusci

      - name: NPM Install
        if: ${{ inputs.RUN_NPM_INSTALL }}
        run: |
          npm install
          npm install @salesforce/sfdx-lwc-jest --save-dev

      - name: Authorize Devhub
        run: |
          echo "$DEVHUB_KEY" | base64 -d > ./devhub.key
          echo "** Running 'sfdx auth:jwt:grant' ..."
          sfdx auth:jwt:grant --clientid $DEVHUB_CLIENTID --username $DEVHUB_USERNAME --jwtkeyfile devhub.key --setdefaultdevhubusername --instanceurl $PROD_INST_URL
          echo "** Running 'sfdx force:config:set' ..."
          sfdx force:config:set defaultdevhubusername=$DEVHUB_USERNAME

      - name: Build
        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize' }}
        run: |
          ACTIVE_SCRATCH=$(sfdx force:data:soql:query -q "SELECT SignupUsername FROM ScratchOrgInfo where Status='Active' and SignupUsername='$SCRATCH_ORG_USERNAME'" -u $DEVHUB_USERNAME --json)
          COUNT=`echo "$ACTIVE_SCRATCH" | jq -r '.result.totalSize'`
          if [ $COUNT -gt 0 ];then
            echo "** Using existing scratch org"
            echo "** Running 'sfdx auth:jwt:grant' ..."
            sfdx auth:jwt:grant --clientid $DEVHUB_CLIENTID --username $SCRATCH_ORG_USERNAME --jwtkeyfile devhub.key --instanceurl $TEST_INST_URL
          else
            echo "** Creating new scratch org"
            echo "** Running 'sfdx force:org:create' ..."
            sfdx force:org:create -f $SCRATCH_ORG_JSON username=$SCRATCH_ORG_USERNAME -d 30
            echo "** Running 'sfdx force:config:set' ..."
            sfdx force:config:set defaultdevhubusername=$DEVHUB_USERNAME
            echo "** Running 'sfdx force:user:password:generate' ..."
            sfdx force:user:password:generate -u $SCRATCH_ORG_USERNAME
          fi
          echo "** Running 'sfdx force:user:display' ..."
          sfdx force:user:display -u $SCRATCH_ORG_USERNAME
          echo "** Running 'cci org import' ..."
          cci org import $SCRATCH_ORG_USERNAME $SCRATCH_ORG_ALIAS
          echo "** Running 'cci flow run $CCI_FLOW_NAME' ..."
          cci flow run $CCI_FLOW_NAME --org $SCRATCH_ORG_ALIAS
        
      - name: Delete Scratch Org
        if: ${{ github.event.action == 'closed' }}
        run: |
          sfdx auth:jwt:grant --clientid $DEVHUB_CLIENTID --username $SCRATCH_ORG_USERNAME --jwtkeyfile devhub.key --instanceurl $TEST_INST_URL
          STATUS=$?
          if [ $STATUS -eq 0 ];then
            echo "** Deleting scratch org $SCRATCH_ORG_USERNAME"
            echo 'y' | sfdx force:org:delete -u $SCRATCH_ORG_USERNAME
          fi
